//第六节 指针(Pointer)

#include <iostream>
using std::cout;
using std::endl;

/**
* 终于到了指针环节
* 不要觉得指针很难 而去害怕指针 不使用指针
* 其实指针真的很好用 不要怕 你可以学会的!
* 本节我们要学习两个符号指针操作符(*) 和取址符(&）
* 一定要注意 取址符是取地址的意思
* 而地址 直白的说和我们现实中地址其实差不多 比如我家住在xx省xx市xx街道xx号
*/

int main() {
	//指针的定义十分简单 在类型的后面 加个星号(*)即可
	//我们定义了一个int类型的指针 为了防止它指向别的东西 我们先将它赋值为空指针(nullptr)
	int *ptr = nullptr;
	//注意 在C++中应该使用nullptr代替NULL
	//C++中定义的NULL其实是数字0 它并不是一个指针
	//而nullptr的类型是nullptr_t 属于指针类型

	//我们再定义一个值 赋值为100
	int i = 100;
	//让我们的指针指向i 那么就要用到取址符(&)了
	//很简单 只要在变量名称的前面加上&即可拿到它的地址
	ptr = &i;

	//于是这样 我们就拿到了i的地址 并且存储在ptr指针中了 我们来看看ptr值吧！
	cout << "指针ptr指向的i的地址为:" << ptr << endl;
	//可见 我们拿到了一个十六进制的值 这个就是i的地址了

	//当然 我们也可以操作指针去访问变量的值
	//操作也很简单 我们只需要在指针的前面再加个星号即可 这个操作称之为解引用
	cout << "指针ptr指向的i的值为:" << *ptr << endl;

	//我们还可以操作指针去修改变量的值
	//首先我们解引用 然后直接赋值即可
	//这个操作会干涉到原本变量的值  所以我们通过指针修改值之后 原本i的值也会被修改
	*ptr = 200;
	cout << "指针ptr指向的i的值为:" << *ptr << endl;
	cout << "i的值为:" << i << endl;

	//最后 我们使用完一个指针并且确保不会再使用时 我们应该把指针设置为nullptr回收指针 从而防止指针变成野指针
	ptr = nullptr;

	//指针基础的东西就这么多 是不是很简单呢~
	//接下去我们讲解一点进阶的东西

	//void类型的指针
	//这是一个比较特殊的类型的指针 无类型指针
	//它可以指向任何类型 但是void类型的指针不能解引用
	void *voidPtr = &i;
	//错误:表达式必须是指向完整对象类型的指针
	//cout << "指针voidPtr指向的i的值为:" << *voidPtr << endl;

	//常量指针与指针常量
	//很多人会被这个搞混 其实记忆的方式很简单

	//常量指针 指针操作符在常量的后面
	const int *p1 = &i;
	//常量指针无法修改指向的对象的值 可以防止误操作赋值
	//但是常量指针指向的对象可以修改
	//举个例子 我能去小明家 也能去小芳家 但是我只能看 不能拿他们家的东西
	//错误:表达式必须是可修改的左值
	//*p1 = 300;

	//指针常量 指针操作符在常量的前面
	int *const p2 = &i;
	//指针常量 指针指向的值可以修改 但是指针指向的对象不能改
	//举个例子 我现在只能去小明家了 我可以随意在他们家逛 还能随便吃他们家的东西用他们家的东西
	//编译通过
	*p2 = 300;
}