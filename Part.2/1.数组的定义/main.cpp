//第一节 数组的定义

/*
* 我们可以定义一个基础数据类型 当然也可以定义它的数组
* 定义的方式很简单 直接在变量名后面加上中括号即可[]
* 并且在中括号中填入数组的大小即可
*/

#include <iostream>
using std::cout;
using std::endl;

int main() {
	//定义了一个int类型的数组 它的大小是10个元素
	//只有指定了数组大小 才能不初始化里面的变量
	int intArr[10];

	//当然你也可以不填写数组大小 直接给数组赋值 这样子编译器会自动根据你填入的数据初始化数组
	//将光标移上去可以看到IDE自动指定了数组大小为[3]
	double doubleArr[] = { 1.0,2.0,3.0 };

	//接下去是数组的访问
	//访问数组内的元素也很简单 可以使用下标访问
	//下标就是指元素在数组中所在的位置 相当于门牌号 有了门牌号你就能找到他
	//使用方法如下
	cout << "double数组中第一个元素是:" << doubleArr[0] << endl;
	//切记！！！
	//下标是从0开始的 也就是说 你输入0 访问的是数组中第一个元素 输入1 访问的就是第二个了

	//还有 数组访问会出现数组越界的问题 可能会出现值为随机值 甚至导致程序崩溃的问题
	//下面这一行运行之后会提示两个错误信息:
	//C6385:从"doubleArr"中读取的数据无效:可读大小为"24"个字节，但可能读取了"48"个字节。
	//C6201:索引"5“超出了“0"至“2"的有效范围(对于可能在堆栈中分配的缓冲区"doubleArr")。
	cout << "double中第六个元素是" << doubleArr[5] << endl;

	//我们使用sizeof测量一个数组时 会检测这个数组占用了多少内存
	cout << "doubleArr数组占用了" << sizeof(doubleArr) << "字节内存空间" << endl;
	//因此 我们可以通过 sizeof(数组) 除以 sizeof(它的数据类型) 来检测它的元素有多少个
	cout << "doubleArr一共有" << sizeof(doubleArr) / sizeof(double) << "个元素" << endl;  //输出3

	//当然 之前我们提了用for循环遍历数组 这时候可以回到1.8去看看啦~
}